<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>落雨乄天珀夜</title>
  
  
  <link href="https://conqueror712.github.io/atom.xml" rel="self"/>
  
  <link href="https://conqueror712.github.io/"/>
  <updated>2025-07-25T07:35:39.903Z</updated>
  <id>https://conqueror712.github.io/</id>
  
  <author>
    <name>落雨乄天珀夜</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python UV丨教程</title>
    <link href="https://conqueror712.github.io/post/UV.html"/>
    <id>https://conqueror712.github.io/post/UV.html</id>
    <published>2025-07-25T07:00:00.000Z</published>
    <updated>2025-07-25T07:35:39.903Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🤗<a href="https://conqueror712.github.io/">本站</a></p><p>📦<a class="link"   href="https://github.com/Conqueror712" >Github <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>💠<a class="link"  href="https://juejin.cn/user/1297878069809725/posts" >稀土掘金 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>📚<a class="link"   href="https://www.zhihu.com/people/soeur712" >知乎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><p>简单来说，可以将 uv 理解为 cargo</p><h1 id="零进行-uv-的安装">零、进行 uv 的安装</h1><p>我们从安装 Python 开始：</p><ol type="1"><li>进入官网：https://www.python.org/，点击 Download后选择合适的版本下载即可，不多说</li><li>设置 Python的环境变量，这里安装的时候一般都会有勾选的选项，如果没有的话手动搜索一下如何添加，然后添加上即可</li><li>进入命令行，输入 <code>pip install uv</code>，安装成功</li><li>确保 uv 的路径已经被添加进了环境变量中（至于路径，你可以使用<code>pip show uv</code> 来找到）</li></ol><h1 id="一用-uv-创建项目">一、用 uv 创建项目</h1><p>有了 uv 之后，如何使用呢：</p><ol type="1"><li>在命令行中，进入目标路径，即新项目的根目录</li><li>输入 <code>uv init my_project_name</code>，就可以生成包括.gitignore, <a class="link"   href="http://README.md" >README.md <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>等初始化文件，避免了繁琐的手动创建（其中，一并被创建出来的.python-version 和 pyproject.toml 是 uv 用来管理虚拟环境的关键）</li></ol><p>一切正常的话，你可以看到命令行输出：Initialized project xxx at xxx的信息</p><p>同时还有以下文件：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.git</span><br><span class="line">.gitignore</span><br><span class="line">.python-version</span><br><span class="line">main.py</span><br><span class="line">pyproject.toml</span><br><span class="line">README.md</span><br></pre></td></tr></table></figure></div><h1 id="二用-uv-管理环境">二、用 uv 管理环境</h1><p>说明：</p><ul><li>无需手动激活环境，直接 <code>uv add</code> 和 <code>uv run</code>即可，因为这里环境和项目是一体的</li><li>使用 pyproject.toml来管理项目依赖，很自然（比如想要运行别人的项目时，只需要拿到其pyproject.toml 文件，然后 <code>uv sync</code>一下即可，避免各种环境乱掉，懂的都懂）</li></ul><p>比如说我要安装 pandas，则只需要 <code>uv add pandas</code> 即可</p><h1 id="三用-uv-管理命令行工具">三、用 uv 管理命令行工具</h1><p>在 Python 中，像是 pytest, ruff都是所谓的命令行工具（直接能在命令行中使用）</p><p>这种工具其实没有必要每个项目都搞一个，故可以全局安装</p><p>只需这样：<code>uv tool install pytest</code></p><p>当然，也可以像 npx一样，临时运行一个命令，既不安装到项目环境，也不安装到全局环境</p><p>则只需要这样：<code>uvx pytest</code></p><p>或者单独运行一个 .py文件：<code>uv init --script main.py</code>，然后往代码中最前面生成的元信息里填入所需依赖，随后再次使用<code>uv run</code> 运行，即可创建临时虚拟环境并运行，并不会生成 .venv文件</p><h1 id="附常用-uv-命令">附、常用 uv 命令</h1><h3 id="安装">4.1 安装</h3><ul><li><code>pip install uv</code></li></ul><h3 id="版本">4.2 版本</h3><ul><li><code>uv python list</code> 打印所有 uv 支持的 Python 版本</li><li><code>uv python install cpython-3.12</code> 安装指定的 Python版本</li><li><code>uv run -p 3.12 test.py</code> 用指定的 Python 版本运行 Python代码</li></ul><h3 id="虚拟环境">4.3 虚拟环境</h3><ul><li><code>uv init my_project_name</code> 初始化一个 Python 项目</li><li><code>uv init -p 3.13</code> 初始化一个基于 Python 3.13 的项目</li><li>进入项目执行 <code>uv venv</code> 在当前项目创建一个虚拟环境</li><li><code>source .venv/bin/activate</code> 激活当前虚拟环境（Linux orMac）</li><li><code>deactivate</code> 关闭当前虚拟环境</li><li><code>uv add package_name</code> 安装某库到当前项目中</li><li><code>uv run main.py</code> 运行 main.py</li><li><code>uv tree</code> 打印项目依赖树</li><li><code>uv remove package_name</code> 从项目依赖中删除库</li><li><code>uv tool install ruff</code> 把 ruff安装到系统全局环境，而不是当前项目</li><li><code>uv tool list</code> 查看系统中当前都安装了哪些 Python工具</li><li><code>uv build</code> 会把项目打包成一个 .whl文件，然后这个文件发布后就可以让所有人使用了。打包前需要做点事情，在pyproject.toml 中，指定脚本的名称和需要执行的文件:函数</li><li><code>uv sync</code> 按照当前项目 pyproject.toml文件中的依赖配置安装依赖，并生成 uv.lock 文件，如果有 uv.lock了，就严格按照 uv.lock 里的版本下载</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;🤗&lt;a href=&quot;https://conqueror712.github.io/&quot;&gt;本站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📦&lt;a class=&quot;link&quot;   href=&quot;https://github.com/Conqueror712&quot; &gt;Gith</summary>
      
    
    
    
    <category term="Articles" scheme="https://conqueror712.github.io/categories/Articles/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo 博客搭建丨教程</title>
    <link href="https://conqueror712.github.io/post/Hexo.html"/>
    <id>https://conqueror712.github.io/post/Hexo.html</id>
    <published>2025-07-24T07:00:00.000Z</published>
    <updated>2025-07-25T07:32:59.906Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🤗<a href="https://conqueror712.github.io/">本站</a></p><p>📦<a class="link"   href="https://github.com/Conqueror712" >Github <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>💠<a class="link"  href="https://juejin.cn/user/1297878069809725/posts" >稀土掘金 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>📚<a class="link"   href="https://www.zhihu.com/people/soeur712" >知乎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h1 id="零准备工作">零、准备工作</h1><p>环境选择：</p><ul><li>OS: Windows 11</li></ul><p>必备工具：</p><ul><li>nodejs</li><li>git</li></ul><p>工具安装好之后，打开命令行（管理员模式），分别输入<code>node -v</code> 和 <code>npm -v</code>即可查看版本，若正常出现版本号，则安装成功。</p><h1 id="一hexo-下载">一、Hexo 下载</h1><p>依然打开命令行（管理员模式），输入<code>npm install hexo-cli -g</code> 即可。</p><h1 id="二新建-github-仓库">二、新建 Github 仓库</h1><p>要点注意：</p><ol type="1"><li>必须是 public 的仓库</li><li>Repository name 必须按照 <a class="link"  href="http://username.github.io" >username.github.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>来填写（这里的用户名就是你 Github 的用户名）</li></ol><h1 id="三配置-ssh-key-和-git-config">三、配置 SSH Key 和 gitconfig</h1><p>如果你的电脑已经配置好了 Github 的 SSH Key，则此步可以跳过！</p><p>在任意文件夹中右键，打开 Git bash here，然后输入<code>ssh-keygen -t rsa -C "Email"</code>（这里的 Email 就是你 Github上默认绑定的 Email），随后按 Enter 四下即可。</p><p>在 Git bash 中再输入<code>git config --global [user.name](&lt;http://user.name&gt;) "GithubID"</code></p><p>以及<code>git config --global [user.email](&lt;http://user.email&gt;) "Email"</code>即可。</p><h1 id="四本地博客部署">四、本地博客部署</h1><p>新建文件夹后（名称随意），点开（这就是存放你所有博客文件的位置），随后打开Git bash here</p><ul><li>然后输入 <code>hexo init</code> 或者 <code>npx hexo init</code>进行初始化</li><li><code>npx hexo install</code> 进行安装</li><li><code>npx hexo g</code> 生成初始状态</li><li><code>npx hexo s</code>本地部署（用浏览器打开显示的连接可以看到博客已在 <a class="link"  href="http://localhost" >localhost <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 上部署）</li></ul><h1 id="五线上博客部署">五、线上博客部署</h1><p>进入刚才创建的 Github 仓库，复制仓库链接（git版本），粘贴到下方代码块中的 <code>repository:</code> 的后面位置。</p><p>打开博客文件夹中的 _config.yml 文件，在底部添加如下代码：</p><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy</span>:</span><br><span class="line"><span class="attr">type</span>: git</span><br><span class="line"><span class="attr">repository</span>:</span><br><span class="line"><span class="attr">branch</span>: main</span><br></pre></td></tr></table></figure></div><p>如果原本有 <code>type:</code> 等内容，则将其替换掉（注意缩进）</p><p>保存后推荐先 <code>npx hexo cl</code> 一下，然后重新<code>npx hexo g</code> ，随后 <code>npx hexo d</code> 即可上传。</p><h1 id="六latex-公式显示问题">六、Latex 公式显示问题</h1><p>我们这里采用 mathjax + pandoc 的方法</p><ul><li><p><code>npm install hexo-filter-mathjax</code></p></li><li><p><code>npm uninstall hexo-renderer-marked</code></p></li><li><p><code>npm install hexo-renderer-pandoc</code></p></li><li><p>https://pandoc.org/installing.html 本地下载一个pandoc，默认路径即可</p></li><li><p>根目录下的 _config.yml 末尾添加：</p><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">math</span>:</span><br><span class="line">  # <span class="title class_">Default</span> (<span class="literal">false</span>) will load mathjax / katex script on demand.</span><br><span class="line">  # <span class="title class_">That</span> is it only render those page which has <span class="string">`mathjax: true`</span> <span class="keyword">in</span> front-matter.</span><br><span class="line">  # <span class="title class_">If</span> you set it to <span class="literal">true</span>, it will load mathjax / katex script <span class="variable constant_">EVERY</span> <span class="variable constant_">PAGE</span>.</span><br><span class="line">  <span class="attr">every_page</span>: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mathjax</span>:</span><br><span class="line">    <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">    # <span class="title class_">Available</span> <span class="attr">values</span>: none | ams | all</span><br><span class="line">    <span class="attr">tags</span>: none</span><br><span class="line"></span><br><span class="line">  <span class="attr">katex</span>:</span><br><span class="line">    <span class="attr">enable</span>: <span class="literal">false</span></span><br><span class="line">    # <span class="title class_">See</span>: <span class="language-xml">&lt;https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex&gt;</span></span><br><span class="line">    <span class="attr">copy_tex</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure></div></li><li><p>theme 下的 _config.yml 末尾添加：</p><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax</span>:</span><br><span class="line">  <span class="attr">tags</span>: none # or <span class="string">&#x27;ams&#x27;</span> or <span class="string">&#x27;all&#x27;</span></span><br><span class="line">  <span class="attr">single_dollars</span>: <span class="literal">true</span> # enable single dollar signs <span class="keyword">as</span> <span class="keyword">in</span>-line math delimiters</span><br><span class="line">  <span class="attr">cjk_width</span>: <span class="number">0.9</span> # relative <span class="variable constant_">CJK</span> char width</span><br><span class="line">  <span class="attr">normal_width</span>: <span class="number">0.6</span> # relative normal (monospace) width</span><br><span class="line">  <span class="attr">append_css</span>: <span class="literal">true</span> # add <span class="variable constant_">CSS</span> to pages rendered by <span class="title class_">MathJax</span></span><br><span class="line">  <span class="attr">every_page</span>: <span class="literal">true</span> # <span class="keyword">if</span> <span class="literal">true</span>, every page will be rendered by <span class="title class_">MathJax</span> regardless the <span class="string">`mathjax`</span> setting <span class="keyword">in</span> <span class="title class_">Front</span>-matter</span><br><span class="line">  <span class="attr">packages</span>: # extra packages to load</span><br><span class="line">  <span class="attr">extension_options</span>: &#123;&#125;</span><br><span class="line">    # you can put your extension options here</span><br><span class="line">    # see &lt;<span class="attr">http</span>:<span class="comment">//docs.mathjax.org/en/latest/options/input/tex.html#tex-extension-options&gt; for more detail</span></span><br></pre></td></tr></table></figure></div></li><li><p>重启电脑即可</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;🤗&lt;a href=&quot;https://conqueror712.github.io/&quot;&gt;本站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📦&lt;a class=&quot;link&quot;   href=&quot;https://github.com/Conqueror712&quot; &gt;Gith</summary>
      
    
    
    
    <category term="Articles" scheme="https://conqueror712.github.io/categories/Articles/"/>
    
    
  </entry>
  
  <entry>
    <title>Hi There丨欢迎您来！</title>
    <link href="https://conqueror712.github.io/post/HiThere.html"/>
    <id>https://conqueror712.github.io/post/HiThere.html</id>
    <published>2025-07-11T07:00:00.000Z</published>
    <updated>2025-07-25T07:25:45.034Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>🤗<a href="https://conqueror712.github.io/">本站</a></p><p>📦<a class="link"   href="https://github.com/Conqueror712" >Github <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>💠<a class="link"  href="https://juejin.cn/user/1297878069809725/posts" >稀土掘金 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>📚<a class="link"   href="https://www.zhihu.com/people/soeur712" >知乎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><p>欢迎！来都来了，不坐下来喝一杯咖啡吗？</p><p>这里是 Conqueror712 的 Cyber Space！</p><p>关于我以前的一些博客文章，您可以前往我的掘金主页查看，如果您有兴趣的话~</p><blockquote><p>🔭我的情况：</p><ul><li>02 年生人（目前 22 岁）</li><li>教育背景：<ul><li>本科：北京某双非人工智能（本科前三年在 BUPT 进行联合培养）</li><li>硕士：ECNU 软工（研 0 在读）</li></ul></li><li>本科三段实习经历：<ul><li>第一段：在美团做 LLM 数据分析</li><li>第二段：在循环智能做 RAG</li><li>第三段：在字节做 Function Call 和 Agent 集成开发</li></ul></li><li>其他方面：<ul><li>2023 年稀土掘金技术平台人工智能方向签约作者</li><li>一篇 CCF C，一篇发明型专利</li></ul></li><li>业余爱好：旅行，健身，音乐，摄影</li></ul></blockquote><p>如果我的博客内容有帮助到你的话，不妨在 <a class="link"  href="https://github.com/Conqueror712" >Github <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>点个⭐，或者前往我的任何平台关注一下~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;🤗&lt;a href=&quot;https://conqueror712.github.io/&quot;&gt;本站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📦&lt;a class=&quot;link&quot;   href=&quot;https://github.com/Conqueror712&quot; &gt;Gith</summary>
      
    
    
    
    <category term="Articles" scheme="https://conqueror712.github.io/categories/Articles/"/>
    
    
  </entry>
  
</feed>
